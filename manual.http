@baseUrl = http://localhost:3000
@contentType = application/json
@accept = application/json

### SUPERADMIN API TESTS ###
### TEST GROUP: POST /api/superadmins/login ###

### Test: should be rejected if request is empty
POST {{baseUrl}}/api/superadmins/login
Content-Type: {{contentType}}
Accept: {{accept}}

{
  "username": "",
  "password": ""
}

### Test: should be rejected if request is invalid
POST {{baseUrl}}/api/superadmins/login
Content-Type: {{contentType}}
Accept: {{accept}}

{
  "username": "rif",
  "password": "perpus"
}

### Test: should be able to login
# @name loginSuccess
POST {{baseUrl}}/api/superadmins/login
Content-Type: {{contentType}}
Accept: {{accept}}

{
  "username": "rif123",
  "password": "perpuskampis"
}

### Store the token from the successful login response
@authToken = {{loginSuccess.response.body.data.token}}

### TEST GROUP: DELETE /api/superadmins/current ###

### Test: should be rejected if token is empty
DELETE {{baseUrl}}/api/superadmins/current
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization:

### Test: should be rejected if token is invalid
DELETE {{baseUrl}}/api/superadmins/current
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer eyJhb....GOdQ

### Test: should be able to logout user
DELETE {{baseUrl}}/api/superadmins/current
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}


### STUDENT API TESTS ###
### First, let's login as superadmin to get a token for authorization
# @name loginSuccess
POST {{baseUrl}}/api/superadmins/login
Content-Type: {{contentType}}
Accept: {{accept}}

{
  "username": "rif123",
  "password": "perpuskampis"
}

### Store the token from the successful login
@authToken = {{loginSuccess.response.body.data.token}}

### TEST GROUP: GET /api/students/:id ###

### Test: should be rejected if student is not found
GET {{baseUrl}}/api/students/201dfe0a-adf3-442e-8c69-c709bd7aec14
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Prepare: Get Valid Student ID
# @name getFirstStudent
GET {{baseUrl}}/api/students/search?size=1
Authorization: Bearer {{loginSuccess.response.body.data.token}}
Accept: {{accept}}


### Test: should be able to get student
# Note: This requires a valid student ID. In the test it uses testService.getUser()
# For this manual test, you may need to replace with a valid ID from your database
GET {{baseUrl}}/api/students/{{getFirstStudent.response.body.data[0].id}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### TEST GROUP: GET /api/students ###

### Test: should be able to get list student
GET {{baseUrl}}/api/students/
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search student by full_name
GET {{baseUrl}}/api/students/search?full_name=ah
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search student by full_name not found
GET {{baseUrl}}/api/students/search?full_name=wrong
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search student by nim
GET {{baseUrl}}/api/students/search?nim=205410084
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search student by nim not found
GET {{baseUrl}}/api/students/search?nim=205410079
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search student with page
GET {{baseUrl}}/api/students/search?size=1&page=2
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search student with page v2
GET {{baseUrl}}/api/students/search?size=8&page=2
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should use default pagination when not provided
GET {{baseUrl}}/api/students/search
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}


### BOOK API TESTS ###
### First, let's login as superadmin to get a token for authorization
# @name loginSuccess
POST {{baseUrl}}/api/superadmins/login
Content-Type: {{contentType}}
Accept: {{accept}}

{
  "username": "rif123",
  "password": "perpuskampis"
}

### Store the token from the successful login
@authToken = {{loginSuccess.response.body.data.token}}

### TEST GROUP: POST /api/books ###

### Test: should be rejected if request is invalid
POST {{baseUrl}}/api/books
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": 3,
  "stock": "abc"
}

### Test: should be able to create book
# @name createBook
POST {{baseUrl}}/api/books
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku AI",
  "stock": 2
}

### Store the book ID from the successful creation
@bookId = {{createBook.response.body.data.id}}

### Test: should be rejected if book title already exists
POST {{baseUrl}}/api/books
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku AI",
  "stock": 6
}

### TEST GROUP: GET /api/books/:id ###

### Test: should be rejected if book is not found
GET {{baseUrl}}/api/books/1a9ddd5c-4ed7-41ef-ba35-a862e2cedd05
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to get book
GET {{baseUrl}}/api/books/{{bookId}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### TEST GROUP: PATCH /api/books/:id ###

### Test: should be able to update title only
PATCH {{baseUrl}}/api/books/{{bookId}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku Cerdas"
}

### Test: should be able to update stock only
PATCH {{baseUrl}}/api/books/{{bookId}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "stock": 4
}

### Test: should be able to update title and stock
PATCH {{baseUrl}}/api/books/{{bookId}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku Serbaguna",
  "stock": 10
}

### Create another book for conflict test
# @name createBookV2
POST {{baseUrl}}/api/books
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku Code",
  "stock": 2
}

### Store the book ID from the successful creation
@bookIdV2 = {{createBookV2.response.body.data.id}}

### Test: should be rejected if book title already exists
PATCH {{baseUrl}}/api/books/{{bookId}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku Code",
  "stock": 5
}

### Test: should be rejected if book does not exist
PATCH {{baseUrl}}/api/books/201dfe0a-adf3-442e-8c69-c709bd7aec14
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku Baru",
  "stock": 3
}

### TEST GROUP: DELETE /api/books/:id ###

### Test: should be able to remove book
DELETE {{baseUrl}}/api/books/{{bookIdV2}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be rejected if book does not exist
DELETE {{baseUrl}}/api/books/201dfe0a-adf3-442e-8c69-c709bd7aec14
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be rejected if book has active loans
# Note: This test requires a book with active loans
# In the test it creates a loan using testService.createLoan()
DELETE {{baseUrl}}/api/books/{{bookId}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### TEST GROUP: GET /api/books ###

### Create books for list test
# @name createBookAgain
POST {{baseUrl}}/api/books
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku AI Fresh",
  "stock": 2
}

### @name createBookV2Again
POST {{baseUrl}}/api/books
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku Code Fresh",
  "stock": 2
}

### Test: should be able to get list of books
GET {{baseUrl}}/api/books
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### TEST GROUP: GET /api/books/search ###

### Test: should be able to search books by id
GET {{baseUrl}}/api/books/search?id={{createBookAgain.response.body.data.id}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search books by id not found
GET {{baseUrl}}/api/books/search?id=1a9ddd5c-4ed7-41ef-ba35-a862e2cedd05
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search books by title
GET {{baseUrl}}/api/books/search?title=Code
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search books by title not found
GET {{baseUrl}}/api/books/search?title=205410079
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search books with page
# Note: This test requires multiple books (15) created by testService.createBookMass()
GET {{baseUrl}}/api/books/search?size=1&page=2
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search books with page v2
# Note: This test requires multiple books (15) created by testService.createBookMass()
GET {{baseUrl}}/api/books/search?size=8&page=2
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should use default pagination when not provided
GET {{baseUrl}}/api/books/search
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}


### LOAN API TESTS ###
### First, let's login as superadmin to get a token for authorization
# @name loginSuccess
POST {{baseUrl}}/api/superadmins/login
Content-Type: {{contentType}}
Accept: {{accept}}

{
  "username": "rif123",
  "password": "perpuskampis"
}

### Store the token from the successful login
@authToken = {{loginSuccess.response.body.data.token}}

### TEST GROUP: POST /api/loans ###

### Creating a book for loan tests
# @name createBook
POST {{baseUrl}}/api/books
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku Loan Test",
  "stock": 5
}

### Store the book ID
@bookId = {{createBook.response.body.data.id}}

### Test: should be rejected if request is invalid
POST {{baseUrl}}/api/loans
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "nim": "",
  "bookId": "invalid-id"
}

### Test: should be able to create loan
# Note: You need a valid student NIM
POST {{baseUrl}}/api/loans
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "nim": "205410080",
  "bookId": "{{bookId}}"
}

### Creating another book for additional tests
# @name createBookV2
POST {{baseUrl}}/api/books
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku Loan Test 2",
  "stock": 1
}

### Store the book ID
@bookIdV2 = {{createBookV2.response.body.data.id}}

### Test: should be rejected if book out of stock
POST {{baseUrl}}/api/loans
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "nim": "205410080",
  "bookId": "{{bookIdV2}}"
}

### Creating a third book for additional tests
# @name createBookV3
POST {{baseUrl}}/api/books
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "title": "Buku Loan Test 3",
  "stock": 5
}

### Store the book ID
@bookIdV3 = {{createBookV3.response.body.data.id}}

### Test: should be rejected if student has pending loans
POST {{baseUrl}}/api/loans
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "nim": "205410080",
  "bookId": "{{bookIdV3}}"
}

### TEST GROUP: GET /api/loans/:id ###

### First create a loan to get id
# @name createLoan
POST {{baseUrl}}/api/loans
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "nim": "205410084",
  "bookId": "{{bookIdV3}}"
}

### Store the loan ID
@loanId = {{createLoan.response.body.data.id}}

### Test: should be rejected if loan is not found
GET {{baseUrl}}/api/loans/1a9ddd5c-4ed7-41ef-ba35-a862e2cedd05
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to get loan
GET {{baseUrl}}/api/loans/{{loanId}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### TEST GROUP: PATCH /api/loans/:id ###

### Test: should be able to update loan status to RETURNED
PATCH {{baseUrl}}/api/loans/{{loanId}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "status": "RETURNED"
}

### Create another loan for invalid transition test
# @name createLoanForTransition
POST {{baseUrl}}/api/loans
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "nim": "205410085",
  "bookId": "{{bookId}}"
}

### Store the loan ID
@loanIdForTransition = {{createLoanForTransition.response.body.data.id}}

### First mark as returned
PATCH {{baseUrl}}/api/loans/{{loanIdForTransition}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "status": "RETURNED"
}

### Test: should be rejected if invalid status transition
PATCH {{baseUrl}}/api/loans/{{loanIdForTransition}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "status": "APPROVED"
}

### Test: should be rejected if loan not found
PATCH {{baseUrl}}/api/loans/201dfe0a-adf3-442e-8c69-c709bd7aec14
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "status": "RETURNED"
}

### TEST GROUP: DELETE /api/loans/:id ###

### Create a loan for deletion test
# @name createLoanForDeletion
POST {{baseUrl}}/api/loans
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

{
  "nim": "205410086",
  "bookId": "{{bookId}}"
}

### Store the loan ID
@loanIdForDeletion = {{createLoanForDeletion.response.body.data.id}}

### Test: should be able to remove loan
DELETE {{baseUrl}}/api/loans/{{loanIdForDeletion}}
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be rejected if loan is not found
DELETE {{baseUrl}}/api/loans/201dfe0a-adf3-442e-8c69-c709bd7aec14
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### TEST GROUP: GET /api/loans ###

### Test: should be able to get list of loans
GET {{baseUrl}}/api/loans
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### TEST GROUP: GET /api/loans/search ###

### Create multiple loans for search tests
# Note: In the test it uses testService.createLoanMass()
# For manual testing, you may need to create additional loans

### Test: should be able to search loans by nim
GET {{baseUrl}}/api/loans/search?nim=205410084
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search loans by full name
GET {{baseUrl}}/api/loans/search?full_name=Ahmad
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search loans by status
GET {{baseUrl}}/api/loans/search?status=APPROVED
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should be able to search loans with pagination
GET {{baseUrl}}/api/loans/search?size=2&page=1
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}

### Test: should use default pagination when not provided
GET {{baseUrl}}/api/loans/search
Content-Type: {{contentType}}
Accept: {{accept}}
Authorization: Bearer {{authToken}}